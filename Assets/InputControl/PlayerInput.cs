//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/InputControl/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""CatMovement"",
            ""id"": ""f814bc91-83e6-46fa-9885-fccb4c9e4a51"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""15ce80f0-81a8-495f-b531-58d84faf7aa8"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""7cd7c696-371b-44a0-808d-b001311f4b8e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Howl"",
                    ""type"": ""Button"",
                    ""id"": ""d83d439b-ac13-4e4f-a1cb-8ecbd4c22d44"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Quit"",
                    ""type"": ""Button"",
                    ""id"": ""9632d1c8-352b-489c-a0ca-2308416d080e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""61dc8a95-2315-4cd6-baf0-cae01e7b732c"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c1c5b0a7-f7e1-41ee-b0e7-a5617b6f21f7"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Howl"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""314aa5d7-beb3-4f12-80cc-96c12bf5940b"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""d4b83961-bdb2-40a7-93be-39897ff608a3"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""2c868e32-f369-434d-9eea-81cd25d17634"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""1719d39e-ce5b-4314-aa9f-ac9e883c0404"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""72bf56a1-c0fc-4cff-8d81-2ff66724d618"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""84b66166-0b1f-4557-9559-5ce716c32900"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Quit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // CatMovement
        m_CatMovement = asset.FindActionMap("CatMovement", throwIfNotFound: true);
        m_CatMovement_Move = m_CatMovement.FindAction("Move", throwIfNotFound: true);
        m_CatMovement_Jump = m_CatMovement.FindAction("Jump", throwIfNotFound: true);
        m_CatMovement_Howl = m_CatMovement.FindAction("Howl", throwIfNotFound: true);
        m_CatMovement_Quit = m_CatMovement.FindAction("Quit", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // CatMovement
    private readonly InputActionMap m_CatMovement;
    private List<ICatMovementActions> m_CatMovementActionsCallbackInterfaces = new List<ICatMovementActions>();
    private readonly InputAction m_CatMovement_Move;
    private readonly InputAction m_CatMovement_Jump;
    private readonly InputAction m_CatMovement_Howl;
    private readonly InputAction m_CatMovement_Quit;
    public struct CatMovementActions
    {
        private @PlayerInput m_Wrapper;
        public CatMovementActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_CatMovement_Move;
        public InputAction @Jump => m_Wrapper.m_CatMovement_Jump;
        public InputAction @Howl => m_Wrapper.m_CatMovement_Howl;
        public InputAction @Quit => m_Wrapper.m_CatMovement_Quit;
        public InputActionMap Get() { return m_Wrapper.m_CatMovement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CatMovementActions set) { return set.Get(); }
        public void AddCallbacks(ICatMovementActions instance)
        {
            if (instance == null || m_Wrapper.m_CatMovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CatMovementActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Howl.started += instance.OnHowl;
            @Howl.performed += instance.OnHowl;
            @Howl.canceled += instance.OnHowl;
            @Quit.started += instance.OnQuit;
            @Quit.performed += instance.OnQuit;
            @Quit.canceled += instance.OnQuit;
        }

        private void UnregisterCallbacks(ICatMovementActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Howl.started -= instance.OnHowl;
            @Howl.performed -= instance.OnHowl;
            @Howl.canceled -= instance.OnHowl;
            @Quit.started -= instance.OnQuit;
            @Quit.performed -= instance.OnQuit;
            @Quit.canceled -= instance.OnQuit;
        }

        public void RemoveCallbacks(ICatMovementActions instance)
        {
            if (m_Wrapper.m_CatMovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICatMovementActions instance)
        {
            foreach (var item in m_Wrapper.m_CatMovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CatMovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CatMovementActions @CatMovement => new CatMovementActions(this);
    public interface ICatMovementActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnHowl(InputAction.CallbackContext context);
        void OnQuit(InputAction.CallbackContext context);
    }
}
